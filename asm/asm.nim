include prelude

const constants = split

proc getBfLines(lines: seq[string]): seq[string] =
  var registers: Table[string, int]
  var point = 0
  var stack: seq[string]
  proc goto(register: string): string =
    if not registers.hasKey(register):
      registers[register] = registers.len
    while point < registers[register]:
      result &= ">"
      inc point
    while point > registers[register]:
      result &= "<"
      dec point
    
  for line in lines:
    let words = line.strip.split
    result &= (case words[0]
    of "clear": goto(words[1]) & "[-]"
    of "dec":   goto(words[1]) & "-"
    of "inc":   goto(words[1]) & "+"
    of "out":   goto(words[1]) & "."
    of "in":    goto(words[1]) & ","
    of "set":   replace(goto(words[1]) & constants[words[2].parseInt], "<>", "")
    of "while": (stack &= words[1]; goto(words[1]) & "[")
    of "end":   goto(stack.pop) & "]"
    else:       "")

proc compile(source:string, golf=false): string =
  var lines = source.strip.splitLines
  let bf = lines.getBfLines
  if golf: return bf.join("")
  let maxlen = lines.mapIt(it.len).max
  for i in 0..<lines.len:
    lines[i] = lines[i].alignLeft(maxlen + 1) & bf[i]
  return lines.join("\n")

echo """
set NL 10
set rep 10
while rep
  dec rep
  clear letter
  set letter 65
  set rem 26
  while rem
    dec rem
    out letter
    inc letter
  end
  out NL
end
""".compile